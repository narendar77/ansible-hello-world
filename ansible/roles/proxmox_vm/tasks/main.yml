---
- name: Clone VM from template
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    validate_certs: false
    clone: "{{ vm_template_name }}"
    newid: "{{ item.vmid }}"
    name: "{{ item.hostname }}"
    node: "{{ proxmox_node }}"
    storage: "{{ vm_storage | default('local-lvm') }}"
    format: "{{ vm_format | default('qcow2') }}"
    full: true
    timeout: 300
  loop: "{{ vms }}"
  register: cloned_vms
  delegate_to: localhost

- name: Configure VM resources
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    validate_certs: false
    vmid: "{{ item.vmid }}"
    node: "{{ proxmox_node }}"
    cores: "{{ item.cores | default(2) }}"
    memory: "{{ item.memory | default(2048) }}"
    update: true
  loop: "{{ vms }}"
  delegate_to: localhost

- name: Set VM hostname via cloud-init (if supported)
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    validate_certs: false
    vmid: "{{ item.vmid }}"
    node: "{{ proxmox_node }}"
    ciuser: "{{ vm_default_user | default('root') }}"
    cipassword: "{{ vm_default_password | default(omit) }}"
    searchdomain: "{{ vm_search_domain | default(omit) }}"
    nameservers: "{{ vm_nameservers | default(omit) }}"
    ipconfig:
      ipconfig0: "{{ item.ipconfig | default('ip=dhcp') }}"
    update: true
  loop: "{{ vms }}"
  when: use_cloud_init | default(false)
  delegate_to: localhost

- name: Start VMs
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    validate_certs: false
    vmid: "{{ item.vmid }}"
    node: "{{ proxmox_node }}"
    state: started
  loop: "{{ vms }}"
  when: start_vms | default(true)
  delegate_to: localhost

- name: Wait for VMs to be running
  community.general.proxmox_kvm:
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_host: "{{ proxmox_api_host }}"
    validate_certs: false
    vmid: "{{ item.vmid }}"
    node: "{{ proxmox_node }}"
    state: current
  loop: "{{ vms }}"
  register: vm_status
  until: vm_status is success
  retries: 10
  delay: 10
  when: start_vms | default(true)
  delegate_to: localhost

- name: Set hostname inside VMs using qm guest exec
  ansible.builtin.shell: |
    qm guest exec {{ item.vmid }} -- /bin/bash -c "hostnamectl set-hostname {{ item.hostname }} && echo '{{ item.hostname }}' > /etc/hostname"
  loop: "{{ vms }}"
  when:
    - start_vms | default(true)
    - configure_hostname | default(true)
  delegate_to: "{{ proxmox_api_host }}"
  vars:
    ansible_user: root
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  ignore_errors: true
  register: hostname_set_result

- name: Display hostname configuration status
  debug:
    msg: "Hostname '{{ item.item.hostname }}' set for VM {{ item.item.vmid }} - Status: {{ 'Success' if item.rc == 0 else 'Failed (may need QEMU guest agent)' }}"
  loop: "{{ hostname_set_result.results }}"
  when:
    - configure_hostname | default(true)
    - hostname_set_result is defined

- name: Display VM information
  debug:
    msg: "VM {{ item.hostname }} (ID: {{ item.vmid }}) has been created and started"
  loop: "{{ vms }}"
